Q1. -

class Solution:
    def Square_Root(self, x: int) -> int:
        min = 0
        max = x
        i = 0
        if x == 1:
            return 1
        while i < 1:
            mid = (min + max) / 2
            res = mid ** 2
            res = round(res, 4)
            if res == x:
                i = 1
                break
            elif res > x:
                max = mid
            else:
                min = mid

        return int(mid)

f = Solution()
print(f.Square_Root())


Q2. -

class Solution:
    def Peak_Element(self, arr: list[int]) -> int:
        low = 0
        high = len(arr)-1
        while low <= high:
             mid = (low + high) // 2
             if ((mid == 0 or arr[mid-1]) <= arr[mid]) and ((mid == high or arr[mid+1] <= arr[mid])):
                 break
             if mid > 0 and arr[mid - 1] > arr[mid]:
                 high = mid -1
             else:
                 low = mid + 1
        return mid

f = Solution()
print(f.Peak_Element())

Q3. -

class Solution:
    def Missing_Number(self, arr: list[int]) -> int:
        arr.sort()
        low = 0
        high = len(arr)
        while low < high:
            mid = (low + high) // 2
            if arr[mid] > mid:
                low = mid
            else:
                low = mid+1
            return low

f = Solution()
print(f.Missing_Number())


Q5. -

class Solution:
    def Intersection(self, nums1: list[int], nums2: list[int]) -> list[int]:
        if nums1 == None or nums2 == None or len(nums1) == 0 or len(nums2) == 0:
            return [0]

        i = 0
        j = 0
        nums1.sort()
        nums2.sort()
        result = []
        while i < len(nums1) and j < len(nums2):
            if nums1[i] == nums2[j]:
                result.append(nums1[i])
                i += 1
                j += 1
            elif nums1[i] < nums2[j]:
                i += 1
            else:
                j += 1
        return result


f = Solution()
print(f.Intersection())


Q6. -

class Solution:
    def Minimum_Element(self, nums: list[int]) -> int:
        if nums[0] < nums[1] and nums[0] < nums[len(nums)-1]:
            return nums[0]
        if nums[len(nums)-1] < nums[len(nums)-2] and nums[len(nums)-1] < nums[0]:
            return nums[len(nums)-1]

        low = 0
        high = len(nums) - 1
        while low < high:
            mid = (low + high) // 2
            if nums[mid] < nums[mid-1] and nums[mid] < nums[mid+1]:
                return nums[mid]
            elif nums[mid] > nums[mid-1] and nums[mid] > nums[mid+1]:
                return nums[mid+1]
            elif nums[mid] < nums[mid+1]:
                low = mid
            elif nums[mid] > nums[mid-1]:
                high = mid

f = Solution()
print(f.Minimum_Element())


Q7. -

class Solution:
    def Find_Position(self, nums: list[int], target: int) -> list[int]:
        if len(nums) < 1:
            return [-1, -1]
        if len(nums) == 1:
            if nums[0] == target:
                return [0, 0]
            else:
                return [-1, -1]
        low = 0
        high = len(nums)
        while low < len(nums):
            mid = (low + high) // 2
            if len(nums) > 1:
                if nums[mid] == target:
                    if nums[mid-1] != target and nums[mid+1] != target:
                        return [mid, mid]
                    if nums[mid-1] == target:
                        return [mid-1, mid]
                    elif nums[mid+1] == target:
                        return [mid, mid+1]
                if nums[mid] != target:
                    if target < nums[0] or target > nums[len(nums)-1]:
                        return [-1, -1]
                    elif nums[mid-1] < target or nums[mid+1] > target:
                        return [-1, -1]
                elif nums[mid] > target:
                    high = mid
                elif nums[mid] < target:
                    low = mid


f = Solution()
print(f.Find_Position(nums, 6))


Q8. -

class Solution:
    def Intersection(self, nums1: list[int], nums2: list[int]) -> list[int]:
        if nums1 == None or nums2 == None or len(nums1) == 0 or len(nums2) == 0:
            return [0]

        i = 0
        j = 0
        nums1.sort()
        nums2.sort()
        result = []
        while i < len(nums1) and j < len(nums2):
            if nums1[i] == nums2[j]:
                result.append(nums1[i])
                i += 1
                j += 1
            elif nums1[i] < nums2[j]:
                i += 1
            else:
                j += 1
        return result


f = Solution()
print(f.Intersection())
